{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8820615,"sourceType":"datasetVersion","datasetId":5306477},{"sourceId":8820716,"sourceType":"datasetVersion","datasetId":5306543},{"sourceId":8820948,"sourceType":"datasetVersion","datasetId":5306628}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install ultralytics","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install wandb","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!wandb login ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom ultralytics import YOLO\nfrom ultralytics.utils import metrics","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Configuración de la ruta de los datos","metadata":{"execution":{"iopub.status.busy":"2024-06-29T23:27:07.219068Z","iopub.execute_input":"2024-06-29T23:27:07.219497Z","iopub.status.idle":"2024-06-29T23:27:07.223985Z","shell.execute_reply.started":"2024-06-29T23:27:07.219465Z","shell.execute_reply":"2024-06-29T23:27:07.222988Z"}}},{"cell_type":"code","source":"\npath_images = '/kaggle/input/to-train-crosswalks/to_train/images'\npath_labels = '/kaggle/input/to-train-crosswalks/to_train/labels'\npath_test_images = '/kaggle/input/test-crosswalk/test/images'\npath_test_labels = '/kaggle/input/test-crosswalk/test/labels'","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport shutil\nimport pandas as pd\n\npath_working_test='/kaggle/working/test_folder'\n\npath_working_test_images = f'{path_working_test}/test_images'\npath_working_test_labels = f'{path_working_test}/test_labels'\n\n# Crear directorios de trabajo para las imágenes y etiquetas de prueba\nos.makedirs(path_working_test_images, exist_ok=True)\nos.makedirs(path_working_test_labels, exist_ok=True)\n\n# Copiar las imágenes de prueba al directorio de trabajo\nfor image_name in os.listdir(path_test_images):\n    shutil.copy(os.path.join(path_test_images, image_name), os.path.join(path_working_test_images, image_name))\n\n# Copiar las etiquetas de prueba al directorio de trabajo\nfor label_name in os.listdir(path_test_labels):\n    shutil.copy(os.path.join(path_test_labels, label_name), os.path.join(path_working_test_labels, label_name))\n\n# Verificar y completar etiquetas de prueba\ntest_images = os.listdir(path_working_test_images)\n\nfor image_name in test_images:\n    base_name = image_name[:-4]\n    label_name = base_name + '.txt'\n    label_path = os.path.join(path_working_test_labels, label_name)\n\n    if not os.path.exists(label_path):\n        with open(label_path, 'w') as f:\n            pass\n        print(f\"Se ha creado un archivo de etiqueta vacío para {image_name}\")\n\n# Crear DataFrames para los datos de entrenamiento y prueba\ndata = pd.DataFrame({'image': os.listdir(path_images), 'label': os.listdir(path_labels)})\ntest_data = pd.DataFrame({'image': os.listdir(path_working_test_images), 'label': os.listdir(path_working_test_labels)})\n\n# Imprimir DataFrames para verificar\nprint(\"Datos de entrenamiento:\")\nprint(data)\nprint(\"\\nDatos de prueba:\")\nprint(test_data)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Cargar los datos","metadata":{}},{"cell_type":"code","source":"\nimages = os.listdir(path_images)\nlabels = os.listdir(path_labels)\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f'Cant imag: {len(images)}')\nprint(f'Cant labels: {len(labels)}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Asegurarse de que las imágenes y las etiquetas coinciden","metadata":{}},{"cell_type":"code","source":"val_data=test_data","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"val_data['image'].head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport shutil\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom ultralytics import YOLO\nfrom ultralytics.utils import metrics\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score\nimport matplotlib.pyplot as plt\n\n# Configurar el modelo YOLOv8\nmodel = YOLO('yolov8n.pt')  # Puedes cambiar el modelo base según tus necesidades","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Crear Carpeta para guardar los resultados de la validación","metadata":{}},{"cell_type":"code","source":"os.makedirs('/kaggle/working/validation_results', exist_ok=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Función para evaluar el modelo\ndef evaluate_model(model,experiment_name:str):\n    yaml_content = \"\"\"\n                   \n\n                    train: /kaggle/working/\n                    val: /kaggle/working/test_folder/test_images\n\n\n                    nc: 1\n\n                    names:\n                         - crosswalk\n                    \"\"\"\n\n    # Guardar el archivo\n    with open('/kaggle/working/crosswalk_test.yaml', 'w') as file:\n        file.write(yaml_content)\n\n    print(\"Archivo .yaml creado con éxito.\")\n    \n   \n    predictions= model.val(data='/kaggle/working/crosswalk_test.yaml',project=f'/kaggle/working/validation_results', name=f'experiment{experiment_name}',save_json=True)\n    ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Directorio para guardar las métricas\nmetrics_dir = '/kaggle/working/metrics'\nos.makedirs(metrics_dir, exist_ok=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Parámetros para la condición de parada\nn_experiments = 10\nmax_epochs = 300  # Número máximo de epochs para el entrenamiento\npatience = 10  # Número de epochs a esperar si no hay mejora en la precisión","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Crear Carpeta para guardar los modelos finales","metadata":{}},{"cell_type":"code","source":"save_weights_dir='/kaggle/working/save_weights'\nos.makedirs('/kaggle/working/save_weights', exist_ok=True)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n    \nall_experiment_metrics = []\n\n\nfor experiment in range(n_experiments):\n    \n    try:\n     # Inicializa un nuevo run\n        wandb.init(\n            project=\"CrossWalks_Detection\",\n            group=\"TT\",\n            job_type=\"Train\",\n            name=f\"Experimento_{experiment}\",\n            reinit=True\n        )\n    except:\n        print(\"Fallo subir los salves\")\n    \n    print(f\"Experimento {experiment + 1}\")\n    \n    # Dividir los datos en train y validation\n    train_data, val_data = train_test_split(data, test_size=0.2, random_state=42)\n    \n    # Crear directorio para el experimento \n    experiment_dir=os.path.join('/kaggle/working',f'experiment_{experiment+1}')\n    os.makedirs(experiment_dir,exist_ok=True)\n    \n    # Crear directorios para train y validation\n    train_dir = os.path.join(experiment_dir, f'train_data_{experiment + 1}')\n    val_dir = os.path.join(experiment_dir, f'val_data_{experiment + 1}')\n    os.makedirs(train_dir, exist_ok=True)\n    os.makedirs(val_dir, exist_ok=True)\n    \n    # Crear directorios para imágenes y etiquetas dentro de train y validation\n    train_images_dir = os.path.join(train_dir, 'images')\n    train_labels_dir = os.path.join(train_dir, 'labels')\n    val_images_dir = os.path.join(val_dir, 'images')\n    val_labels_dir = os.path.join(val_dir, 'labels')\n    os.makedirs(train_images_dir, exist_ok=True)\n    os.makedirs(train_labels_dir, exist_ok=True)\n    os.makedirs(val_images_dir, exist_ok=True)\n    os.makedirs(val_labels_dir, exist_ok=True)\n    print(f'Copiando a las carpetas de entrenamiento')\n    # Copiar las imágenes y etiquetas a los directorios correspondientes\n    for index in train_data.index:\n        shutil.copy(os.path.join(path_images, train_data.loc[index, 'image']), os.path.join(train_images_dir, train_data.loc[index, 'image']))\n        shutil.copy(os.path.join(path_labels, train_data.loc[index, 'label']), os.path.join(train_labels_dir, train_data.loc[index, 'label']))\n    for index in val_data.index:\n        shutil.copy(os.path.join(path_images, val_data.loc[index, 'image']), os.path.join(val_images_dir, val_data.loc[index, 'image']))\n        shutil.copy(os.path.join(path_labels, val_data.loc[index, 'label']), os.path.join(val_labels_dir, val_data.loc[index, 'label']))\n    print(\"Copiado\")\n    # Crear el archivo YAML\n    yaml_path = os.path.join('/kaggle/working', f'data_{experiment + 1}.yaml')\n    yaml_content = f\"\"\"\n                    names:\n                        0: crosswalk\n                    train: {train_dir}/images\n                    val: {val_dir}/images\n                    \"\"\"\n    # Guardar el archivo\n    with open(yaml_path, 'w') as file:\n        file.write(yaml_content)\n    print(\"Archivo .yaml creado con éxito.\")\n    \n    experiment_result_path=f'/kaggle/working/experiment_{experiment+1}/training_results'\n    \n    os.makedirs(experiment_result_path, exist_ok=True)\n    \n    model.train(data=yaml_path,\n                    epochs=max_epochs, # Número máximo de epochs para el entrenamiento\n                    imgsz=512,\n                    cache=True,\n                    patience=patience,\n                    batch=32,\n                    save_period=10,\n                    seed=123,\n                    time=2,\n                    save=True,\n                    plots=True,\n                    project=f'proyect_experiment{1}',\n                    device=[0, 1],\n                    # Esto especifica el uso de las GPUs 0 y 1\n                        )  # Ajustar epochs e imgsz según tus necesidades\n    evaluate_model(model,f'experiment_{experiment}')\n    \n    # Export the model\n    model.export(format=\"onnx\")\n    model.save(f'{save_weights_dir}/experiment{experiment}')\n        \nwandb.finish()\n\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport zipfile\n\ndef comprimir_carpeta(carpeta_origen, archivo_destino):\n    try:\n        # Asegurarse de que la carpeta de origen existe\n        if not os.path.exists(carpeta_origen):\n            raise FileNotFoundError(f\"La carpeta de origen '{carpeta_origen}' no existe.\")\n\n        # Crear el archivo ZIP\n        with zipfile.ZipFile(archivo_destino, 'w', zipfile.ZIP_DEFLATED) as zipf:\n            # Recorrer el directorio y agregar archivos al ZIP\n            for raiz, dirs, archivos in os.walk(carpeta_origen):\n                for archivo in archivos:\n                    ruta_completa = os.path.join(raiz, archivo)\n                    ruta_relativa = os.path.relpath(ruta_completa, carpeta_origen)\n                    zipf.write(ruta_completa, ruta_relativa)\n\n        print(f\"Compresión completada. Archivo ZIP creado en: {archivo_destino}\")\n    except Exception as e:\n        print(f\"Error durante la compresión: {str(e)}\")\n\n# Ejemplo de uso\ncarpeta_origen = \"/kaggle/working/\"\narchivo_destino = \"/kaggle/working/save.zip\"\n\ncomprimir_carpeta(carpeta_origen, archivo_destino)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T03:22:23.512763Z","iopub.execute_input":"2024-06-30T03:22:23.513687Z","iopub.status.idle":"2024-06-30T03:22:33.200833Z","shell.execute_reply.started":"2024-06-30T03:22:23.513648Z","shell.execute_reply":"2024-06-30T03:22:33.199911Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Compresión completada. Archivo ZIP creado en: /kaggle/working/save.zip\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}