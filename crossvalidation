{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8820615,"sourceType":"datasetVersion","datasetId":5306477},{"sourceId":8820716,"sourceType":"datasetVersion","datasetId":5306543},{"sourceId":8820948,"sourceType":"datasetVersion","datasetId":5306628}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/franciscosuarezb/crossvalidationcrosswalk?scriptVersionId=186143277\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"!pip install ultralytics","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-29T23:23:17.047354Z","iopub.execute_input":"2024-06-29T23:23:17.048069Z","iopub.status.idle":"2024-06-29T23:23:32.07206Z","shell.execute_reply.started":"2024-06-29T23:23:17.04804Z","shell.execute_reply":"2024-06-29T23:23:32.071158Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting ultralytics\n  Downloading ultralytics-8.2.48-py3-none-any.whl.metadata (41 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.2/41.2 kB\u001b[0m \u001b[31m725.4 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: numpy<2.0.0,>=1.23.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (1.26.4)\nRequirement already satisfied: matplotlib>=3.3.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (3.7.5)\nRequirement already satisfied: opencv-python>=4.6.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (4.10.0.82)\nRequirement already satisfied: pillow>=7.1.2 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (9.5.0)\nRequirement already satisfied: pyyaml>=5.3.1 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (6.0.1)\nRequirement already satisfied: requests>=2.23.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (2.32.3)\nRequirement already satisfied: scipy>=1.4.1 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (1.11.4)\nRequirement already satisfied: torch>=1.8.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (2.1.2)\nRequirement already satisfied: torchvision>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (0.16.2)\nRequirement already satisfied: tqdm>=4.64.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (4.66.4)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from ultralytics) (5.9.3)\nRequirement already satisfied: py-cpuinfo in /opt/conda/lib/python3.10/site-packages (from ultralytics) (9.0.0)\nRequirement already satisfied: pandas>=1.1.4 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (2.2.1)\nRequirement already satisfied: seaborn>=0.11.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (0.12.2)\nCollecting ultralytics-thop>=2.0.0 (from ultralytics)\n  Downloading ultralytics_thop-2.0.0-py3-none-any.whl.metadata (8.5 kB)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (21.3)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (3.1.1)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.1.4->ultralytics) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.1.4->ultralytics) (2023.4)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.23.0->ultralytics) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.23.0->ultralytics) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.23.0->ultralytics) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.23.0->ultralytics) (2024.2.2)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (1.12.1)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (2024.3.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib>=3.3.0->ultralytics) (1.16.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.8.0->ultralytics) (2.1.3)\nRequirement already satisfied: mpmath<1.4.0,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.8.0->ultralytics) (1.3.0)\nDownloading ultralytics-8.2.48-py3-none-any.whl (793 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m793.7/793.7 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hDownloading ultralytics_thop-2.0.0-py3-none-any.whl (25 kB)\nInstalling collected packages: ultralytics-thop, ultralytics\nSuccessfully installed ultralytics-8.2.48 ultralytics-thop-2.0.0\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install wandb","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:29:57.160933Z","iopub.execute_input":"2024-06-30T02:29:57.161738Z","iopub.status.idle":"2024-06-30T02:30:09.563412Z","shell.execute_reply.started":"2024-06-30T02:29:57.161701Z","shell.execute_reply":"2024-06-30T02:30:09.562172Z"},"trusted":true},"execution_count":157,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: wandb in /opt/conda/lib/python3.10/site-packages (0.17.0)\nRequirement already satisfied: click!=8.0.0,>=7.1 in /opt/conda/lib/python3.10/site-packages (from wandb) (8.1.7)\nRequirement already satisfied: docker-pycreds>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (0.4.0)\nRequirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (3.1.41)\nRequirement already satisfied: platformdirs in /opt/conda/lib/python3.10/site-packages (from wandb) (3.11.0)\nRequirement already satisfied: protobuf!=4.21.0,<5,>=3.19.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (3.20.3)\nRequirement already satisfied: psutil>=5.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (5.9.3)\nRequirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from wandb) (6.0.1)\nRequirement already satisfied: requests<3,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (2.32.3)\nRequirement already satisfied: sentry-sdk>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (2.3.1)\nRequirement already satisfied: setproctitle in /opt/conda/lib/python3.10/site-packages (from wandb) (1.3.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from wandb) (69.0.3)\nRequirement already satisfied: six>=1.4.0 in /opt/conda/lib/python3.10/site-packages (from docker-pycreds>=0.4.0->wandb) (1.16.0)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.10/site-packages (from gitpython!=3.1.29,>=1.0.0->wandb) (4.0.11)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (2024.2.2)\nRequirement already satisfied: smmap<6,>=3.0.1 in /opt/conda/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb) (5.0.1)\n","output_type":"stream"}]},{"cell_type":"code","source":"!wandb login ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:01.109573Z","iopub.execute_input":"2024-06-30T02:32:01.109966Z","iopub.status.idle":"2024-06-30T02:32:03.125464Z","shell.execute_reply.started":"2024-06-30T02:32:01.109931Z","shell.execute_reply":"2024-06-30T02:32:03.124166Z"},"trusted":true},"execution_count":162,"outputs":[{"name":"stdout","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mfranciscosuarezbellon\u001b[0m (\u001b[33mfranciscosuarezbellon-Havana University\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom ultralytics import YOLO\nfrom ultralytics.utils import metrics","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:09.016124Z","iopub.execute_input":"2024-06-30T02:32:09.017178Z","iopub.status.idle":"2024-06-30T02:32:09.023048Z","shell.execute_reply.started":"2024-06-30T02:32:09.017128Z","shell.execute_reply":"2024-06-30T02:32:09.021794Z"},"trusted":true},"execution_count":163,"outputs":[]},{"cell_type":"markdown","source":"## Configuración de la ruta de los datos","metadata":{"execution":{"iopub.status.busy":"2024-06-29T23:27:07.219068Z","iopub.execute_input":"2024-06-29T23:27:07.219497Z","iopub.status.idle":"2024-06-29T23:27:07.223985Z","shell.execute_reply.started":"2024-06-29T23:27:07.219465Z","shell.execute_reply":"2024-06-29T23:27:07.222988Z"}}},{"cell_type":"code","source":"\npath_images = '/kaggle/input/to-train-crosswalks/to_train/images'\npath_labels = '/kaggle/input/to-train-crosswalks/to_train/labels'\npath_test_images = '/kaggle/input/test-crosswalk/test/images'\npath_test_labels = '/kaggle/input/test-crosswalk/test/labels'","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:13.65141Z","iopub.execute_input":"2024-06-30T02:32:13.652359Z","iopub.status.idle":"2024-06-30T02:32:13.65753Z","shell.execute_reply.started":"2024-06-30T02:32:13.652321Z","shell.execute_reply":"2024-06-30T02:32:13.656354Z"},"trusted":true},"execution_count":164,"outputs":[]},{"cell_type":"code","source":"import os\nimport shutil\nimport pandas as pd\n\npath_working_test='/kaggle/working/test_folder'\n\npath_working_test_images = f'{path_working_test}/test_images'\npath_working_test_labels = f'{path_working_test}/test_labels'\n\n# Crear directorios de trabajo para las imágenes y etiquetas de prueba\nos.makedirs(path_working_test_images, exist_ok=True)\nos.makedirs(path_working_test_labels, exist_ok=True)\n\n# Copiar las imágenes de prueba al directorio de trabajo\nfor image_name in os.listdir(path_test_images):\n    shutil.copy(os.path.join(path_test_images, image_name), os.path.join(path_working_test_images, image_name))\n\n# Copiar las etiquetas de prueba al directorio de trabajo\nfor label_name in os.listdir(path_test_labels):\n    shutil.copy(os.path.join(path_test_labels, label_name), os.path.join(path_working_test_labels, label_name))\n\n# Verificar y completar etiquetas de prueba\ntest_images = os.listdir(path_working_test_images)\n\nfor image_name in test_images:\n    base_name = image_name[:-4]\n    label_name = base_name + '.txt'\n    label_path = os.path.join(path_working_test_labels, label_name)\n\n    if not os.path.exists(label_path):\n        with open(label_path, 'w') as f:\n            pass\n        print(f\"Se ha creado un archivo de etiqueta vacío para {image_name}\")\n\n# Crear DataFrames para los datos de entrenamiento y prueba\ndata = pd.DataFrame({'image': os.listdir(path_images), 'label': os.listdir(path_labels)})\ntest_data = pd.DataFrame({'image': os.listdir(path_working_test_images), 'label': os.listdir(path_working_test_labels)})\n\n# Imprimir DataFrames para verificar\nprint(\"Datos de entrenamiento:\")\nprint(data)\nprint(\"\\nDatos de prueba:\")\nprint(test_data)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:14.444705Z","iopub.execute_input":"2024-06-30T02:32:14.445443Z","iopub.status.idle":"2024-06-30T02:32:15.023183Z","shell.execute_reply.started":"2024-06-30T02:32:14.445408Z","shell.execute_reply":"2024-06-30T02:32:15.022112Z"},"trusted":true},"execution_count":165,"outputs":[{"name":"stdout","text":"Se ha creado un archivo de etiqueta vacío para Strisce--105-_jpg.rf.16ab0e51e3a52d6520b0c449d2a8b56b(1).jpg\nSe ha creado un archivo de etiqueta vacío para Strisce--107-_jpg.rf.17c8ef02eb84b49a728055218dceaa40(1).jpg\nSe ha creado un archivo de etiqueta vacío para Strisce--118-_jpg.rf.54995eb9bae14606e4cddbc834e8ce37(1).jpg\nSe ha creado un archivo de etiqueta vacío para Strisce--113-_jpg.rf.1fcdddf1cf3d22ab22bf5b31bdd62a1e(1).jpg\nSe ha creado un archivo de etiqueta vacío para Strisce--105-_jpg.rf.e2fce3b37caa1e8452748ffbadde64df(1).jpg\nDatos de entrenamiento:\n                                                  image  \\\n0     Strisce--140-_jpg.rf.86b57352fd2545f88a9c7d0df...   \n1     Strisce--129-_jpg.rf.f1e7a3e79bcee39763e9c18a8...   \n2     Strisce--109-_jpg.rf.35da873c2eeb6715c4d385cde...   \n3     Strisce--345-_jpg.rf.328518dd4dd55a900d1dac183...   \n4     Strisce--1-_jpg.rf.b3959ddb964e8243a89487bddc7...   \n...                                                 ...   \n1289  Strisce--486-_jpg.rf.bd3e3f782f6913de766d60710...   \n1290  Strisce--322-_jpg.rf.3e17720ebb71b10c9460bb6f8...   \n1291  Strisce--355-_jpg.rf.459dc27a619f49e7f0f0ae8e6...   \n1292  Strisce--308-_jpg.rf.a3e7da8bac8305edb9976d533...   \n1293  Strisce--135-_jpg.rf.40613cbe563fd8608210b851d...   \n\n                                                  label  \n0     Strisce--148-_jpg.rf.9df8e6c53b9ce5489e715e08c...  \n1     Strisce--240-_jpg.rf.7fe7de74e9433bf260f4d8885...  \n2     Strisce--388-_jpg.rf.a8a6cd9c8375b77794b45ed7a...  \n3     Strisce--93-_jpg.rf.c0f23f6044ad5d19e34fc2edac...  \n4     Strisce--82-_jpg.rf.396f42e56c81ec9c0cdc0523ac...  \n...                                                 ...  \n1289  Strisce--199-_jpg.rf.6264ff9f2c73b58c6dfb8fb02...  \n1290  Strisce--43-_jpg.rf.a814ae4c8fc012230a1ab73343...  \n1291  Strisce--323-_jpg.rf.de4baf0340177b70fd57157bc...  \n1292  Strisce--98-_jpg.rf.c8db82d211e0c31eb1c9b5c0fb...  \n1293  Strisce--184-_jpg.rf.367282a9d12afc5836786c907...  \n\n[1294 rows x 2 columns]\n\nDatos de prueba:\n                                                 image  \\\n0    Strisce--163-_jpg.rf.8c7b7c1b8e994cf963645a9ae...   \n1    Strisce--399-_jpg.rf.82381c8cb5aabfb2024bde79c...   \n2    Strisce--454-_jpg.rf.c86a31aca0802e22c5888ca0a...   \n3    Strisce--483-_jpg.rf.e1ae61fb90387af2aa6771c97...   \n4    Strisce--287-_jpg.rf.0d4f5b5c909ab94c37979230b...   \n..                                                 ...   \n224  Strisce--113-_jpg.rf.1fcdddf1cf3d22ab22bf5b31b...   \n225  Strisce--228-_jpg.rf.c6546d2777d351fe56fc97277...   \n226  Strisce--260-_jpg.rf.1a98ab7cef45231f4c20a7731...   \n227  Strisce--168-_jpg.rf.fd2f4a9fb310392ff46c487be...   \n228  Strisce--428-_jpg.rf.f541fd1caf8bf17b3141db765...   \n\n                                                 label  \n0    Strisce--193-_jpg.rf.bb1f9ed0c14ad076f701a3de1...  \n1    Strisce--24-_jpg.rf.4c90ff571b68617d61ef53010a...  \n2    Strisce--448-_jpg.rf.cf21daa5a1439351065a128a4...  \n3    Strisce--160-_jpg.rf.2881ffbede5792832f12d44fa...  \n4    Strisce--289-_jpg.rf.d311d5ca83ebf3c192e377a9d...  \n..                                                 ...  \n224  Strisce--231-_jpg.rf.1f582a660d4198d0a43d0871e...  \n225  Strisce--131-_jpg.rf.0060561f06eb69082b06f9cca...  \n226  Strisce--496-_jpg.rf.575f808320688f1afa8a34374...  \n227  Strisce--202-_jpg.rf.256772562c5ba2dd2ed26cfc9...  \n228  Strisce--456-_jpg.rf.0a49bdd0e4a2c3fd982378319...  \n\n[229 rows x 2 columns]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Cargar los datos","metadata":{}},{"cell_type":"code","source":"\nimages = os.listdir(path_images)\nlabels = os.listdir(path_labels)\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f'Cant imag: {len(images)}')\nprint(f'Cant labels: {len(labels)}')","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:17.352956Z","iopub.execute_input":"2024-06-30T02:32:17.35335Z","iopub.status.idle":"2024-06-30T02:32:17.359055Z","shell.execute_reply.started":"2024-06-30T02:32:17.353317Z","shell.execute_reply":"2024-06-30T02:32:17.357954Z"},"trusted":true},"execution_count":166,"outputs":[{"name":"stdout","text":"Cant imag: 1294\nCant labels: 1294\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Asegurarse de que las imágenes y las etiquetas coinciden","metadata":{}},{"cell_type":"code","source":"val_data=test_data","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:19.911363Z","iopub.execute_input":"2024-06-30T02:32:19.912062Z","iopub.status.idle":"2024-06-30T02:32:19.916739Z","shell.execute_reply.started":"2024-06-30T02:32:19.912029Z","shell.execute_reply":"2024-06-30T02:32:19.915691Z"},"trusted":true},"execution_count":167,"outputs":[]},{"cell_type":"code","source":"val_data['image'].head()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:20.253359Z","iopub.execute_input":"2024-06-30T02:32:20.253658Z","iopub.status.idle":"2024-06-30T02:32:20.262009Z","shell.execute_reply.started":"2024-06-30T02:32:20.253634Z","shell.execute_reply":"2024-06-30T02:32:20.260752Z"},"trusted":true},"execution_count":168,"outputs":[{"execution_count":168,"output_type":"execute_result","data":{"text/plain":"0    Strisce--163-_jpg.rf.8c7b7c1b8e994cf963645a9ae...\n1    Strisce--399-_jpg.rf.82381c8cb5aabfb2024bde79c...\n2    Strisce--454-_jpg.rf.c86a31aca0802e22c5888ca0a...\n3    Strisce--483-_jpg.rf.e1ae61fb90387af2aa6771c97...\n4    Strisce--287-_jpg.rf.0d4f5b5c909ab94c37979230b...\nName: image, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"import os\nimport shutil\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom ultralytics import YOLO\nfrom ultralytics.utils import metrics\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score\nimport matplotlib.pyplot as plt\n\n# Configurar el modelo YOLOv8\nmodel = YOLO('yolov8n.pt')  # Puedes cambiar el modelo base según tus necesidades","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:22.92421Z","iopub.execute_input":"2024-06-30T02:32:22.925015Z","iopub.status.idle":"2024-06-30T02:32:23.531431Z","shell.execute_reply.started":"2024-06-30T02:32:22.924966Z","shell.execute_reply":"2024-06-30T02:32:23.530384Z"},"trusted":true},"execution_count":169,"outputs":[{"name":"stdout","text":"Downloading https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n.pt to 'yolov8n.pt'...\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 6.25M/6.25M [00:00<00:00, 78.3MB/s]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Crear Carpeta para guardar los resultados de la validación","metadata":{}},{"cell_type":"code","source":"os.makedirs('/kaggle/working/validation_results', exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:26.379367Z","iopub.execute_input":"2024-06-30T02:32:26.379736Z","iopub.status.idle":"2024-06-30T02:32:26.384971Z","shell.execute_reply.started":"2024-06-30T02:32:26.379705Z","shell.execute_reply":"2024-06-30T02:32:26.383965Z"},"trusted":true},"execution_count":170,"outputs":[]},{"cell_type":"code","source":"\n# Función para evaluar el modelo\ndef evaluate_model(model,experiment_name:str):\n    yaml_content = \"\"\"\n                   \n\n                    train: /kaggle/working/\n                    val: /kaggle/working/test_folder/test_images\n\n\n                    nc: 1\n\n                    names:\n                         - crosswalk\n                    \"\"\"\n\n    # Guardar el archivo\n    with open('/kaggle/working/crosswalk_test.yaml', 'w') as file:\n        file.write(yaml_content)\n\n    print(\"Archivo .yaml creado con éxito.\")\n    \n   \n    predictions= model.val(data='/kaggle/working/crosswalk_test.yaml',project=f'/kaggle/working/validation_results', name=f'experiment{experiment_name}')\n    ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:44.802574Z","iopub.execute_input":"2024-06-30T02:32:44.803481Z","iopub.status.idle":"2024-06-30T02:32:44.809139Z","shell.execute_reply.started":"2024-06-30T02:32:44.803448Z","shell.execute_reply":"2024-06-30T02:32:44.808147Z"},"trusted":true},"execution_count":171,"outputs":[]},{"cell_type":"code","source":"\n# Directorio para guardar las métricas\nmetrics_dir = '/kaggle/working/metrics'\nos.makedirs(metrics_dir, exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:32:48.398833Z","iopub.execute_input":"2024-06-30T02:32:48.399318Z","iopub.status.idle":"2024-06-30T02:32:48.404281Z","shell.execute_reply.started":"2024-06-30T02:32:48.399286Z","shell.execute_reply":"2024-06-30T02:32:48.402942Z"},"trusted":true},"execution_count":172,"outputs":[]},{"cell_type":"code","source":"\n# Parámetros para la condición de parada\nn_experiments = 10\nmax_epochs = 300  # Número máximo de epochs para el entrenamiento\npatience = 20  # Número de epochs a esperar si no hay mejora en la precisión","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:33:14.055046Z","iopub.execute_input":"2024-06-30T02:33:14.055995Z","iopub.status.idle":"2024-06-30T02:33:14.063661Z","shell.execute_reply.started":"2024-06-30T02:33:14.055962Z","shell.execute_reply":"2024-06-30T02:33:14.062606Z"},"trusted":true},"execution_count":173,"outputs":[]},{"cell_type":"code","source":"\n\n    \nall_experiment_metrics = []\n\n\nfor experiment in range(n_experiments):\n    \n    try:\n     # Inicializa un nuevo run\n        wandb.init(\n            project=\"CrossWalks_Detection\",\n            group=\"TT\",\n            job_type=\"Train\",\n            name=f\"Experimento_{experiment}\",\n            reinit=True\n        )\n    except:\n        print(\"Fallo subir los salves\")\n    \n    print(f\"Experimento {experiment + 1}\")\n    \n    # Dividir los datos en train y validation\n    train_data, val_data = train_test_split(data, test_size=0.2, random_state=42)\n    \n    # Crear directorio para el experimento \n    experiment_dir=os.path.join('/kaggle/working',f'experiment_{experiment+1}')\n    os.makedirs(experiment_dir,exist_ok=True)\n    \n    # Crear directorios para train y validation\n    train_dir = os.path.join(experiment_dir, f'train_data_{experiment + 1}')\n    val_dir = os.path.join(experiment_dir, f'val_data_{experiment + 1}')\n    os.makedirs(train_dir, exist_ok=True)\n    os.makedirs(val_dir, exist_ok=True)\n    \n    # Crear directorios para imágenes y etiquetas dentro de train y validation\n    train_images_dir = os.path.join(train_dir, 'images')\n    train_labels_dir = os.path.join(train_dir, 'labels')\n    val_images_dir = os.path.join(val_dir, 'images')\n    val_labels_dir = os.path.join(val_dir, 'labels')\n    os.makedirs(train_images_dir, exist_ok=True)\n    os.makedirs(train_labels_dir, exist_ok=True)\n    os.makedirs(val_images_dir, exist_ok=True)\n    os.makedirs(val_labels_dir, exist_ok=True)\n    print(f'Copiando a las carpetas de entrenamiento')\n    # Copiar las imágenes y etiquetas a los directorios correspondientes\n    for index in train_data.index:\n        shutil.copy(os.path.join(path_images, train_data.loc[index, 'image']), os.path.join(train_images_dir, train_data.loc[index, 'image']))\n        shutil.copy(os.path.join(path_labels, train_data.loc[index, 'label']), os.path.join(train_labels_dir, train_data.loc[index, 'label']))\n    for index in val_data.index:\n        shutil.copy(os.path.join(path_images, val_data.loc[index, 'image']), os.path.join(val_images_dir, val_data.loc[index, 'image']))\n        shutil.copy(os.path.join(path_labels, val_data.loc[index, 'label']), os.path.join(val_labels_dir, val_data.loc[index, 'label']))\n    print(\"Copiado\")\n    # Crear el archivo YAML\n    yaml_path = os.path.join('/kaggle/working', f'data_{experiment + 1}.yaml')\n    yaml_content = f\"\"\"\n                    names:\n                        0: crosswalk\n                    train: {train_dir}/images\n                    val: {val_dir}/images\n                    \"\"\"\n    # Guardar el archivo\n    with open(yaml_path, 'w') as file:\n        file.write(yaml_content)\n    print(\"Archivo .yaml creado con éxito.\")\n    \n    experiment_result_path=f'/kaggle/working/experiment_{experiment+1}/training_results'\n    \n    os.makedirs(experiment_result_path, exist_ok=True)\n    \n    model.train(data=yaml_path,\n                    epochs=max_epochs, # Número máximo de epochs para el entrenamiento\n                    imgsz=512,\n                    cache=True,\n                    patience=patience,\n                    batch=32,\n                    #project= experiment_result_path,\n                    device=[0, 1],\n                    # Esto especifica el uso de las GPUs 0 y 1\n                        )  # Ajustar epochs e imgsz según tus necesidades\n    evaluate_model(model,f'experiment_{experiment}')\n        \nwandb.finish()\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-30T02:41:52.755338Z","iopub.execute_input":"2024-06-30T02:41:52.756063Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Fallo subir los salves\nExperimento 1\nCopiando a las carpetas de entrenamiento\nCopiado\nArchivo .yaml creado con éxito.\nUltralytics YOLOv8.2.48 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15102MiB)\n                                                      CUDA:1 (Tesla T4, 15102MiB)\n\u001b[34m\u001b[1mengine/trainer: \u001b[0mtask=detect, mode=train, model=yolov8n.pt, data=/kaggle/working/data_1.yaml, epochs=300, time=None, patience=20, batch=32, imgsz=512, save=True, save_period=-1, cache=True, device=[0, 1], workers=8, project=None, name=train, exist_ok=False, pretrained=True, optimizer=auto, verbose=True, seed=0, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, bgr=0.0, mosaic=1.0, mixup=0.0, copy_paste=0.0, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=runs/detect/train\nOverriding model.yaml nc=80 with nc=1\n\n                   from  n    params  module                                       arguments                     \n  0                  -1  1       464  ultralytics.nn.modules.conv.Conv             [3, 16, 3, 2]                 \n  1                  -1  1      4672  ultralytics.nn.modules.conv.Conv             [16, 32, 3, 2]                \n  2                  -1  1      7360  ultralytics.nn.modules.block.C2f             [32, 32, 1, True]             \n  3                  -1  1     18560  ultralytics.nn.modules.conv.Conv             [32, 64, 3, 2]                \n  4                  -1  2     49664  ultralytics.nn.modules.block.C2f             [64, 64, 2, True]             \n  5                  -1  1     73984  ultralytics.nn.modules.conv.Conv             [64, 128, 3, 2]               \n  6                  -1  2    197632  ultralytics.nn.modules.block.C2f             [128, 128, 2, True]           \n  7                  -1  1    295424  ultralytics.nn.modules.conv.Conv             [128, 256, 3, 2]              \n  8                  -1  1    460288  ultralytics.nn.modules.block.C2f             [256, 256, 1, True]           \n  9                  -1  1    164608  ultralytics.nn.modules.block.SPPF            [256, 256, 5]                 \n 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 11             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 12                  -1  1    148224  ultralytics.nn.modules.block.C2f             [384, 128, 1]                 \n 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 14             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 15                  -1  1     37248  ultralytics.nn.modules.block.C2f             [192, 64, 1]                  \n 16                  -1  1     36992  ultralytics.nn.modules.conv.Conv             [64, 64, 3, 2]                \n 17            [-1, 12]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 18                  -1  1    123648  ultralytics.nn.modules.block.C2f             [192, 128, 1]                 \n 19                  -1  1    147712  ultralytics.nn.modules.conv.Conv             [128, 128, 3, 2]              \n 20             [-1, 9]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 21                  -1  1    493056  ultralytics.nn.modules.block.C2f             [384, 256, 1]                 \n 22        [15, 18, 21]  1    751507  ultralytics.nn.modules.head.Detect           [1, [64, 128, 256]]           \nModel summary: 225 layers, 3011043 parameters, 3011027 gradients, 8.2 GFLOPs\n\nTransferred 319/355 items from pretrained weights\n\u001b[34m\u001b[1mDDP:\u001b[0m debug command /opt/conda/bin/python3.10 -m torch.distributed.run --nproc_per_node 2 --master_port 34863 /root/.config/Ultralytics/DDP/_temp_bkesqocw140132680963488.py\nUltralytics YOLOv8.2.48 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15102MiB)\n                                                      CUDA:1 (Tesla T4, 15102MiB)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir runs/detect/train', view at http://localhost:6006/\n","output_type":"stream"},{"name":"stderr","text":"wandb: Currently logged in as: franciscosuarezbellon (franciscosuarezbellon-Havana University). Use `wandb login --relogin` to force relogin\nwandb: wandb version 0.17.3 is available!  To upgrade, please run:\nwandb:  $ pip install wandb --upgrade\nwandb: Tracking run with wandb version 0.17.0\nwandb: Run data is saved locally in /kaggle/working/wandb/run-20240630_024206-ruqkdc77\nwandb: Run `wandb offline` to turn off syncing.\nwandb: Syncing run train\nwandb: ⭐️ View project at https://wandb.ai/franciscosuarezbellon-Havana%20University/YOLOv8\nwandb: 🚀 View run at https://wandb.ai/franciscosuarezbellon-Havana%20University/YOLOv8/runs/ruqkdc77\n","output_type":"stream"},{"name":"stdout","text":"Overriding model.yaml nc=80 with nc=1\nTransferred 319/355 items from pretrained weights\nFreezing layer 'model.22.dfl.conv.weight'\n\u001b[34m\u001b[1mAMP: \u001b[0mrunning Automatic Mixed Precision (AMP) checks with YOLOv8n...\n\u001b[34m\u001b[1mAMP: \u001b[0mchecks passed ✅\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mScanning /kaggle/working/experiment_1/train_data_1/labels... 825 images, 226 backgrounds, 0 corrupt: 100%|██████████| 1035/1035 [00:00<00:00, 1505.63it/s]\n  0%|          | 0/1035 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mtrain: \u001b[0mNew cache created: /kaggle/working/experiment_1/train_data_1/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mCaching images (0.8GB RAM): 100%|██████████| 1035/1035 [00:01<00:00, 685.17it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/experiment_1/val_data_1/labels... 49 images, 211 backgrounds, 0 corrupt: 100%|██████████| 259/259 [00:00<00:00, 2855.47it/s]\n\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.0GB RAM):  11%|█         | 29/259 [00:00<00:00, 284.20it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /kaggle/working/experiment_1/val_data_1/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 259/259 [00:00<00:00, 377.96it/s]\n","output_type":"stream"},{"name":"stdout","text":"Plotting labels to runs/detect/train/labels.jpg... \n\u001b[34m\u001b[1moptimizer:\u001b[0m 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... \n\u001b[34m\u001b[1moptimizer:\u001b[0m AdamW(lr=0.000714, momentum=0.9) with parameter groups 57 weight(decay=0.0), 64 weight(decay=0.0005), 63 bias(decay=0.0)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mmodel graph visualization added ✅\nImage sizes 512 train, 512 val\nUsing 4 dataloader workers\nLogging results to \u001b[1mruns/detect/train\u001b[0m\nStarting training for 300 epochs...\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      1/300      1.63G      1.805       2.99      1.829         11        512: 100%|██████████| 33/33 [00:19<00:00,  1.72it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 9/9 [00:01<00:00,  5.74it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.001          1     0.0427     0.0195\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      2/300      1.57G      1.312      2.262       1.42         12        512: 100%|██████████| 33/33 [00:14<00:00,  2.21it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 9/9 [00:01<00:00,  7.68it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0697      0.154     0.0681     0.0286\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      3/300      1.59G      1.214      2.063      1.314         17        512: 100%|██████████| 33/33 [00:15<00:00,  2.17it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 9/9 [00:01<00:00,  7.84it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.064      0.372     0.0453     0.0204\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      4/300      1.58G      1.221      1.895      1.327         22        512: 100%|██████████| 33/33 [00:14<00:00,  2.26it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 9/9 [00:01<00:00,  7.55it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0486      0.372     0.0389     0.0188\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      5/300      1.55G      1.155      1.796      1.294         47        512:  85%|████████▍ | 28/33 [00:12<00:02,  2.22it/s]","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport zipfile\n\ndef comprimir_carpeta(carpeta_origen, archivo_destino):\n    try:\n        # Asegurarse de que la carpeta de origen existe\n        if not os.path.exists(carpeta_origen):\n            raise FileNotFoundError(f\"La carpeta de origen '{carpeta_origen}' no existe.\")\n\n        # Crear el archivo ZIP\n        with zipfile.ZipFile(archivo_destino, 'w', zipfile.ZIP_DEFLATED) as zipf:\n            # Recorrer el directorio y agregar archivos al ZIP\n            for raiz, dirs, archivos in os.walk(carpeta_origen):\n                for archivo in archivos:\n                    ruta_completa = os.path.join(raiz, archivo)\n                    ruta_relativa = os.path.relpath(ruta_completa, carpeta_origen)\n                    zipf.write(ruta_completa, ruta_relativa)\n\n        print(f\"Compresión completada. Archivo ZIP creado en: {archivo_destino}\")\n    except Exception as e:\n        print(f\"Error durante la compresión: {str(e)}\")\n\n# Ejemplo de uso\ncarpeta_origen = \"/kaggle/working/\"\narchivo_destino = \"/kaggle/working/save.zip\"\n\ncomprimir_carpeta(carpeta_origen, archivo_destino)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}